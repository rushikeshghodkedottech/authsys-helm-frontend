name: Frontend CI/CD
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
env:
  IMAGE_NAME: rushikeshghodkedottech/authsys-helm-frontend
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      helm-version: ${{ steps.helm_version.outputs.helm_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Generate tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value={{date 'YYYY.M.D'}}.${{ github.run_number }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}, ${{ 'rushikeshghodkedottech/authsys-helm-frontend:latest' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Setup Helm
        uses: azure/setup-helm@v4
      
      - name: Install helm-s3 plugin
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git
      
      - name: Generate Helm Chart Version (Semantic Versioning)
        id: helm_version
        run: |
          # Get the current year, month, day
          YEAR=$(date '+%Y')
          MONTH=$(date '+%-m')
          DAY=$(date '+%-d')
          
          # Create semantic version: MAJOR.MINOR.PATCH
          # Using year-2023 as major (so 2024 = 1.x.x, 2025 = 2.x.x)
          MAJOR=$((YEAR - 2023))
          MINOR=$MONTH
          PATCH=$((DAY * 1000 + ${{ github.run_number }}))
          
          VERSION="$MAJOR.$MINOR.$PATCH"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "helm_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated Helm version: $VERSION"
     
      - name: Login to AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
 
      - name: Add Helm S3 Repo
        run: helm repo add authsys-frontend s3://helmchartreporushikesh/stable/myapp/frontend
                      
      - name: Package Helm with version
        run: helm package ./authsys-frontend-chart --version ${{ env.VERSION }}
      
      - name: Push Helm Chart to S3
        run: |
          helm repo list
          helm s3 push ./authsys-frontend-chart-${{ env.VERSION }}.tgz authsys-frontend --force
      
      - name: Update Helm Repo
        run: helm repo update authsys-frontend
      
      - name: Search Helm Chart in S3 repo
        run: |
          echo "Searching for charts in repository:"
          helm search repo authsys-frontend
          # echo "Repository index:"
          # helm repo index . --url s3://helmchartreporushikesh/stable/myapp/frontend --merge ./index.yaml || true
      
      - name: Verify chart installation (dry-run)
        run: |
          echo "Testing chart installation with dry-run:"
          helm install test-release authsys-frontend/authsys-frontend-chart --version ${{ env.VERSION }} --dry-run || echo "Dry-run failed, but chart should be available"
  
  deploy:
    runs-on: self-hosted
    needs: build-and-push
    env: 
      VERSION: ${{ needs.build-and-push.outputs.helm-version }}
      
    steps:
      - name: Check Cluster Status 
        run: minikube status
      
      - name: Check HELM Installation 
        run: helm version
  
      - name: Upgrade HELM repo
        run: helm repo update
  
      - name: Set up Kubeconfig
        run: kubectl config use-context minikube

      - name: Verify Kubernetes Cluster
        run: |
          kubectl cluster-info
          kubectl get nodes
      
      - name: Verify Helm Release Status (Pre-upgrade check)
        run: |
          echo "Checking the current Helm release status..."
          helm status frontend --namespace default || echo "Release 'frontend' doesn't exist, proceeding with installation."
  
      - name: Upgrade Helm Chart
        run: |
          # Set variables
          RELEASE_NAME="frontend"
          CHART_NAME="authsys-frontend/authsys-frontend-chart"
          NAMESPACE="default"
          VERSION="${{ env.VERSION }}"

          echo "Installing/Upgrading chart version: $VERSION"
  
          # Check if the release exists, then upgrade or install
          RELEASE_STATUS=$(helm status $RELEASE_NAME --namespace $NAMESPACE || echo "not_found")
  
          if [[ "$RELEASE_STATUS" == "not_found" ]]; then
            echo "Release does not exist, installing..."
            helm install $RELEASE_NAME $CHART_NAME --namespace $NAMESPACE --version $VERSION
          else
            echo "Release found, upgrading..."
            helm upgrade $RELEASE_NAME $CHART_NAME --namespace $NAMESPACE --version $VERSION
          fi
  
      - name: Verify Helm Release Deployment
        run: |
          helm status frontend --namespace default
          kubectl get pods --namespace default -l app.kubernetes.io/instance=frontend
